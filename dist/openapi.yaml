openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: Add new user to the server.
      description: Add new user to the server.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: Username taken.
  /login:
    post:
      tags:
      - Auth
      summary: Login to the system.
      description: An existing user logins to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Incorrect username or password
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Returns the favorites recipes that were saved by the logged-in user.
      description: returns the favorites recipes that were saved by the logged-in user.
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeID'
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/getLastSeen:
    get:
      tags:
      - Users
      summary: Returns the user's last seen recipes.
      description: Returns the user's last seen recipes.
      responses:
        "200":
          description: returned 3 last seen recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastViewed'
              example:
                id: "647631,"
                title: "Hummus Soup,"
                image: "https://spoonacular.com/recipeImages/647631-312x231.jpg,"
                imageType: jpg
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: adds the last recipe to the lastSeen log for logged in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeID'
      responses:
        "200":
          description: returned 3 last seen recipes
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/like:
    put:
      tags:
        - Users
      summary: give like to a recipe
      description: add like to recipe in db
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeID'
      responses:
        "201":
          description: successfuly added like
        "400":
          description: Error, invalid id
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/personalRecipe:
    post:
      tags:
        - Users
      summary: Add new a recipe to user's personal recipes list.
      description: Add new a recipe to user's personal recipes list.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePage'
        required: true
      responses:
        '201':
          description: New recipe has been added.
        '400':
          description: Error during the process.
      security:
      - cookieAuth: []
    get:
      tags:
      - Users
      summary: Returns the recipes that were created by the logged-in user.
      responses:
        "200":
          description: data about the user's created recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/FamilyRecipe:
    post:
      tags:
        - Users
      summary: Add new a recipe to user's personal recipes list.
      description: Add new a recipe to user's personal recipes list.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePage'
        required: true
      responses:
        '201':
          description: New recipe has been added.
        '400':
          description: Error during the process.
      security:
      - cookieAuth: []
    get:
      tags:
      - Users
      summary: Returns the family recipes that were saved by the logged-in user.
      responses:
        "200":
          description: data about the user's family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/FullDetails/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return full details on recipe by his ID
      description: Return full details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePage'
        "404":
          description: recipeId is not exists
  /search:
    get:
      tags:
        - Recipes
      summary: Search for recipes with according to query.
      description: Search for recipe
      parameters:
        - name: searchQuery
          in: query
          description: The query to search
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: cake
        - name: resultsSize
          in: query
          description: how many results to return
          required: true
          style: form
          explode: true
          schema:
            type: integer
            default: 5
            maximum: 15
            minimum: 5
            multipleOf: 5
            example: 10
        - name: IsGlutenFree
          in: query
          description: cuisine tags, SEPERATED BY COMMAS
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: dietTags
          in: query
          description: diet tags, SEPERATED BY COMMAS
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
            - vegan
            - vegetarian
            example: Vegetarian or Vegan only
        
      responses:
        '200':
          description: Return the recipes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiplyRecipes'
        '400':
          description: Error.
  /random:
    get:
      tags:
        - Recipes
      summary: Return 3 random recipie ID's.
      description: Get three random recipes.
      responses:
        '200':
          description: Return the recipes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastViewed'
        '400':
          description: Error.
components:
  schemas:
    RecipeID:
      type: integer
      example: 1930204
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info

    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    LastViewed:
      maxItems: 3
      minItems: 3
      uniqueItems: true
      type: array
      description: Array of 3 recipes
      items:
        $ref: '#/components/schemas/RecipePreview'
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    RecipePage:
      properties:
        image/*:
          type: string
          format: binary
        recipeWindow:
          $ref: '#/components/schemas/RecipePreview'
        ingredientsQuantities:
          type: array
          description: List of ingredients and quantities
          items:
            $ref: '#/components/schemas/ingredientQuantityUnit'
        instructions:
          $ref: '#/components/schemas/recipeInstructions'
        numberOfportion:
          type: integer
          example: 6
      description: recipe page
    ingredientQuantityUnit:
      properties:
        ingrediant:
          type: string
          example: tuna
        quantity:
          type: integer
          example: 2
      description: ingredient and quantity object
    recipeInstructions:
      required:
        - steps
      type: object
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/recipeInstructions_steps'
    recipeInstructions_steps:
      type: object
      properties:
        amountOfMeals:
          type: integer
          example: 1
          default: 1
        equipment:
          $ref: '#/components/schemas/recipeInstructions_equipment'
        ingredients:
          type: array
          example:
            - Potato
            - Tomato
          items:
            type: string
        number:
          type: integer
          example: 1
        step:
          type: string
          example: Preheat the oven to 200 degrees F.
    recipeInstructions_equipment:
      type: object
      properties:
        image:
          type: string
          example: oven.jpg
        name:
          type: string
          example: oven
        temperature:
          $ref: '#/components/schemas/recipeInstructions_equipment_temperature'
    recipeInstructions_equipment_temperature:
      type: object
      properties:
        number:
          type: integer
        unit:
          type: string
          example: Fahrenheit
    MultiplyRecipes:
      type: array
      description: unlimited amount of reduced recipes
      items:
        $ref: '#/components/schemas/RecipePreview'
  
